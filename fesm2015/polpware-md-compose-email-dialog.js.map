{"version":3,"file":"polpware-md-compose-email-dialog.js.map","sources":["ng://@polpware/md-compose-email-dialog/lib/compose-email-dialog/compose-email-dialog.component.ts","ng://@polpware/md-compose-email-dialog/lib/md-compose-email-dialog.module.ts"],"sourcesContent":["import { Component, Inject, ViewChild, ElementRef } from '@angular/core';\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA, MatCheckboxChange } from '@angular/material';\n\nimport { Observable } from 'rxjs';\n\nimport * as showdown from 'showdown';\n\nimport { EmailFormAbstractComponent, parseOnlyEmails } from '@polpware/md-components';\nimport { AlertTypeEnum } from '@polpware/md-components';\n\n\nexport interface IComposeEmailDialogOutput {\n    confirmed?: boolean;\n    emailReceivers?: string[];\n    emailBody?: string;\n    emailTitle?: string;\n    succeed?: boolean;\n}\n\nexport interface IComposeEmailDialogInput {\n    title: string;\n    emailBody: string;\n    emailTitle: string;\n    processor?: (a: IComposeEmailDialogOutput) => Promise<any>;\n    autocompleteObservable?: (text: string) => Observable<Array<IAutoCompleteModel>>;\n}\n\nexport interface IAutoCompleteModel {\n    value: any;\n    display: string;\n}\n\n@Component({\n    selector: 'polp-md-compose-email-dialog',\n    templateUrl: './compose-email-dialog.component.html',\n    styleUrls: ['./compose-email-dialog.component.css']\n})\nexport class ComposeEmailDialogComponent extends EmailFormAbstractComponent {\n\n    alertMessage: string;\n    alertSubMessage: string;\n    alertType: AlertTypeEnum;\n    alertDismissible: boolean;\n\n    requestAutocompleteItems: (text: string) => Observable<Array<IAutoCompleteModel>>;\n\n    constructor(public dialogRef: MatDialogRef<ComposeEmailDialogComponent>,\n        @Inject(MAT_DIALOG_DATA) public data: IComposeEmailDialogInput) {\n\n        super(dialogRef);\n\n        data.title && (this.title = data.title);\n        this.messageBody = data.emailBody || '';\n\n        // alert\n        this.alertMessage = '';\n        this.alertSubMessage = '';\n        this.alertType = AlertTypeEnum.none;\n        this.alertDismissible = false;\n\n        this.requestAutocompleteItems = data.autocompleteObservable || null;\n    }\n\n    public get isSubmitDisabled(): boolean {\n        return this.emails.length === 0 || this.alertType === AlertTypeEnum.running;\n    }\n\n    // Override\n    public onSubmit() {\n        // body\n        // let messageBody = this.messageBody;\n\n        // Convert it into html\n        // const converter = new showdown.Converter();\n        // messageBody = converter.makeHtml(messageBody);\n\n        // Prepare email list\n        const emails = [];\n\n        this.emails.forEach(elem => {\n            let x = elem || (elem.value);\n            const y = parseOnlyEmails(x);\n            y.forEach(m => {\n                emails.push(m);\n            });\n        });\n\n        const outputs: IComposeEmailDialogOutput = {\n            confirmed: true,\n            emailReceivers: emails,\n            emailBody: this.messageBody,\n            emailTitle: this.data.emailTitle || '' // todo:\n        };\n\n        if (this.data.processor) {\n            this.alertType = AlertTypeEnum.running;\n            this.alertMessage = 'The email is being sent out.';\n            this.alertSubMessage = '';\n            this.alertDismissible = false;\n\n            this.data.processor(outputs).then(() => {\n                this.alertType = AlertTypeEnum.none;\n                this.dialogRef.close({\n                    succeed: true\n                });\n            }, (error) => {\n                this.alertType = AlertTypeEnum.error;\n                this.alertMessage = 'Something went wrong.';\n                this.alertDismissible = true;\n                this.alertSubMessage = (error && error.errorInfo) ? error.errorInfo : '';\n            });\n        } else {\n            this.dialogRef.close(outputs);\n        }\n    }\n}\n","import { NgModule } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\n\nimport {\n    ReactiveFormsModule,\n    FormsModule\n} from '@angular/forms';\n\nimport {\n    MatDialogModule,\n    MatButtonModule,\n    MatIconModule\n} from '@angular/material';\n\n\nimport { PolpMdComponentsModule } from '@polpware/md-components';\n\nimport { TagInputModule } from 'ngx-chips';\n\nimport { AutosizeModule } from 'ngx-autosize';\n\nimport {\n    ComposeEmailDialogComponent\n} from './compose-email-dialog/compose-email-dialog.component';\n\n\n@NgModule({\n    declarations: [\n        ComposeEmailDialogComponent\n    ],\n    imports: [\n        CommonModule,\n\n        ReactiveFormsModule,\n        FormsModule,\n\n        MatDialogModule,\n        MatButtonModule,\n        MatIconModule,\n\n        TagInputModule,\n        AutosizeModule,\n\n        PolpMdComponentsModule\n    ],\n    exports: [\n        ComposeEmailDialogComponent\n    ],\n    entryComponents: [\n        ComposeEmailDialogComponent\n    ]\n})\nexport class PolpMdComposeEmailDialogModule { }\n"],"names":[],"mappings":"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"}
