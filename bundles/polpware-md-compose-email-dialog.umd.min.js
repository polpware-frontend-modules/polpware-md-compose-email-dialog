!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@angular/core"),require("@angular/common"),require("@angular/forms"),require("@angular/material"),require("@polpware/md-components"),require("ngx-chips"),require("ngx-autosize")):"function"==typeof define&&define.amd?define("@polpware/md-compose-email-dialog",["exports","@angular/core","@angular/common","@angular/forms","@angular/material","@polpware/md-components","ngx-chips","ngx-autosize"],t):t((e.polpware=e.polpware||{},e.polpware["md-compose-email-dialog"]={}),e.ng.core,e.ng.common,e.ng.forms,e.ng.material,e.mdComponents,e.ngxChips,e.ngxAutosize)}(this,function(e,t,o,n,r,s,a,i){"use strict";var l=function(e,t){return(l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var o in t)t.hasOwnProperty(o)&&(e[o]=t[o])})(e,t)};var u=function(n){function e(e,t){var o=n.call(this,e)||this;return o.dialogRef=e,(o.data=t).title&&(o.title=t.title),o.messageBody=t.emailBody||"",o.alertMessage="",o.alertSubMessage="",o.alertType=s.AlertTypeEnum.none,o.alertDismissible=!1,o.requestAutocompleteItems=t.autocompleteObservable||null,o}return function a(e,t){function o(){this.constructor=e}l(e,t),e.prototype=null===t?Object.create(t):(o.prototype=t.prototype,new o)}(e,n),Object.defineProperty(e.prototype,"isSubmitDisabled",{get:function(){return 0===this.emails.length||this.alertType===s.AlertTypeEnum.running},enumerable:!0,configurable:!0}),e.prototype.onSubmit=function(){var t=this,o=[];this.emails.forEach(function(e){var t=e||e.value;s.parseOnlyEmails(t).forEach(function(e){o.push(e)})});var e={confirmed:!0,emailReceivers:o,emailBody:this.messageBody,emailTitle:this.data.emailTitle||""};this.data.processor?(this.alertType=s.AlertTypeEnum.running,this.alertMessage="The email is being sent out.",this.alertSubMessage="",this.alertDismissible=!1,this.data.processor(e).then(function(){t.alertType=s.AlertTypeEnum.none,t.dialogRef.close({succeed:!0})},function(e){t.alertType=s.AlertTypeEnum.error,t.alertMessage="Something went wrong.",t.alertDismissible=!0,t.alertSubMessage=e&&e.errorInfo?e.errorInfo:""})):this.dialogRef.close(e)},e.decorators=[{type:t.Component,args:[{selector:"polp-md-compose-email-dialog",template:'<h2 mat-dialog-title>\n    {{title}}\n    <button class="float-right"\n            mat-icon-button\n            tabIndex="-1"\n            [mat-dialog-close]="true">\n        <mat-icon>close</mat-icon>\n    </button>\n</h2>\n\n<mat-dialog-content>\n\n    <polp-md-alert-box [message]="alertMessage"\n                       [subMessage]="alertSubMessage"\n                       [kind]="alertType"\n                       [dismissible]="alertDismissible">\n    </polp-md-alert-box>\n\n    <form name="emailForm" autocomplete="off">\n        <div class="flex-box flex-column margin-bottom-15">\n            <tag-input [(ngModel)]="emails" #emailInputBox\n                       name="emailInputs"\n                       [addOnPaste]="true"\n                       [modelAsStrings]="true"\n                       [trimTags]="true"\n                       [editable]="true"\n                       (focusout)="onOutOfTagInput($event)"\n                       [errorMessages]="errorMessages"\n                       [validators]="validators"\n                       [secondaryPlaceholder]="\'Emails\'"\n                       [separatorKeyCodes]="[32,44,58,59]"\n                       [placeholder]="\'More Emails\'">\n                <tag-input-dropdown [autocompleteObservable]="requestAutocompleteItems"\n                                    *ngIf="requestAutocompleteItems">\n                </tag-input-dropdown>\n            </tag-input>\n\n            <div class="full-width margin-top-10">\n                <textarea name="messageBodyInput"\n                          class="full-width"\n                          #emailBody\n                          autosize [minRows]="5" [maxRows]="10"\n                          placeholder="Type your personal message here"\n                          [(ngModel)]="messageBody">\n                </textarea>\n            </div>\n\n        </div>\n    </form>\n\n</mat-dialog-content>\n\n<mat-dialog-actions>\n    <button mat-flat-button\n            color="primary"\n            [disabled]="isSubmitDisabled"\n            (click)="onSubmit()">\n        Send\n    </button>\n</mat-dialog-actions>\n',styles:[""]}]}],e.ctorParameters=function(){return[{type:r.MatDialogRef},{type:undefined,decorators:[{type:t.Inject,args:[r.MAT_DIALOG_DATA]}]}]},e}(s.EmailFormAbstractComponent),m=function(){function e(){}return e.decorators=[{type:t.NgModule,args:[{declarations:[u],imports:[o.CommonModule,n.ReactiveFormsModule,n.FormsModule,r.MatDialogModule,r.MatButtonModule,r.MatIconModule,a.TagInputModule,i.AutosizeModule,s.PolpMdComponentsModule],exports:[u],entryComponents:[u]}]}],e}();e.ComposeEmailDialogComponent=u,e.PolpMdComposeEmailDialogModule=m,Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=polpware-md-compose-email-dialog.umd.min.js.map